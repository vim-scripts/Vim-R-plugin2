*r-plugin.txt*                                              *vim-r-plugin*

                                vim-r-plugin2~
                            Plugin to work with R~

Author: Jakson A. Aquino (jalvesaq@gmail.com)
Last Change: 28 Aug 2009

For Vim version 7.2 and above

==============================================================================

1. Overview                                     |r-plugin-overview|
2. Main features                                |r-plugin-features|
3. Installation                                 |r-plugin-installation|
4. Use                                          |r-plugin-use|
5. How the plugin works                         |r-plugin-functioning|
6. Know bugs and workarounds                    |r-plugin-known-bugs|
7. Options                                      |r-plugin-options|
8. Custom key bindings                          |r-plugin-custom-key-bindings|
9. Files                                        |r-plugin-files|

==============================================================================
1. Overview~
                                                      *r-plugin-overview*

This plugin improves Vim's support to edit R code. It uses some ideas and code
from Johannes Ranke's vim-r-plugin and from Eric Van Dewoestine's screen
plugin. The plugin functionality is similar to what you can find in ess mode
of emacs, and many of the ToolBar icons were borrowed from ess source code.
The last version of this plugin is available at:

    http://www.vim.org/scripts/script.php?script_id=2628

The plugin is under development. What now is default behavior might become
optional and key bindings might change in the future. Please, tell me your
preferences and suggestions and report any bugs.


==============================================================================
2. Main features~
                                                      *r-plugin-features*
  Linux/Unix only:~

    * Communication with R.
    * Omni completion for R objects.

  All platforms:~

    * Indent R code.
    * Small improvements in syntax highlight: added 'T' and 'F' as booleans
      and set strings and comments as spell regions.


==============================================================================
3. Installation~
                                                     *r-plugin-installation*

Install the following packages

   Debian/Ubuntu:
>
     screen r-base-core
<
   Fedora:
>
     screen R
<
You need to activate plugins and indentation according to 'filetype' in your
|vimrc|:
>
   filetype plugin indent on
<
Create your ~/.vim directory if you do not have it yet:
>
   mkdir -p ~/.vim
<
Make a backup of your ~/.vim directory because existing files will be
replaced. Please, look at|r-plugin-files|to see the list of files.

Uncompress the archive:
>
   tar -xvzf vim-r-plugin2-*.tar.gz -C ~/.vim
<
Start Vim and build the tags file for this document (and others that eventually
are in at the same directory):
>
   :helptags ~/.vim/doc
<
Optional steps~

Edit Vim's ToolBar and remove the buttons that you never use.  The plugin adds
some buttons to the tool bar, but you may not see them because gvim has too
many buttons by default. Please see:

   http://vim.wikia.com/wiki/Hide_specific_ToolBar_buttons


==============================================================================
4. Use~
                                                      *r-plugin-use*

Key bindings~

The plugin has the following key biddings, with the corresponding menu items
and, in some cases, tool bar buttons:

   <C-H>     Run R help() with word under cursor as parameter.
   <S-F1>    Run R args() with word under cursor as parameter.
   <F2>      Start a listening R interpreter in new terminal.
   <F4>      Start a listening R --vanilla interpreter in new terminal.
   <F5>      Send the current file to R.
   <F8>      Build tags file (/tmp/.Rtags-user-time) for omni completion.
   <F9>      Send the current line or selected code and go to the next line.
   <C-F9>    Send the current function.
   <M-Enter> Send the current line to R and open a new line (insert mode only).
   <_>       In insert mode, write " <- ", if not inside a string. Please,
	     type "_" again if the function yields " <- " when you really
	     needs "_".

You can customize all key bindings without editing the plugin directly,
except <_> (see|r-plugin-custom-key-bindings|).

==============================================================================
5. How the plugin works~
                                                      *r-plugin-functioning*

Communication through screen~

By default, each Vim buffer runs its own instance of R in a separated terminal
emulator because the screen sessions have unique names. The names are made
using the user name and the seconds of localtime(). Hence, a name clash is
possible if a single user starts more than one Vim buffer at the same second.
You can change this behavior and make all Vim buffers use the same R process
(see |g:vimrplugin_single_r|).

Omni completion~

You should type <C-X><C-O> to start the |omni-completion|. Since it's
uncomfortable to type such a combination of keys, you might want to map an
easier combination for omni completion in your |vimrc|. For example:
>
   imap <C-Space> <C-X><C-O>
<
The omni completion shows the name of the object, its class and its
environment (most frequently, its package name). Vim sends to R the command
to source the script ~/.vim/tools/rtags.R, which produces the tags file used
for omni completion.  You can rebuild the tags file at any time, but Vim
will automatically build it the first time you use the omni completion
feature.  After you send to R a line of code containing the string "library",
Vim will turn on the flag indicating the need of rebuilding the tags file.
Then, if you try an omni completion, the tags file will be rebuilt
automatically. You still need to build the tags file manually to add the names
of other objects created after the tags file. The string "library" is not
detected if you send the whole file to R.

While building the tags file, if a data.frame is found, its columns are also
added to the list of objects. When you try to complete the name of a
data.frame, the columns are not shown, but when the data.frame name is already
complete, and you have inserted the '$' symbol, the next completion will
include the column names.


==============================================================================
6. Know bugs and workarounds~
                                                      *r-plugin-known-bugs*

R session is detached when GVim is closed~

If you launch GVim through a custom keyboard shortcut, the problem may be
solved if you add -f as parameter to GVim. The R session will also be detached
when GVim is closed if you launch GVim by the command line in a terminal
emulator, and, then, close the terminal-emulator. In any case, to reattach the
R session, open a new terminal window and type:
>
   screen -r
<
Indentation~

Correctly written code might be wrongly indented. Examples:

   this code                               is indented as:~
   if(T)                                   if(T)
     for(i in 1:2)                           for(i in 1:2)
     {                                     {
       cat(i, "\n")                          cat(i, "\n")
     }                                     }
                                           
   if(T){                                  if(T){
     if(T)                                   if(T)
     {                                       {
       cat("something\n")                      cat("something\n")
   }}                                        }}


==============================================================================
7. Options~
                                                      *r-plugin-options*

                                                     *g:vimrplugin_term*


The plugin uses as terminal emulator the first executable that it finds from
this list: gnome-terminal, konsole, xfce4-terminal, Eterm, rxvt, aterm, xterm.
However, if your terminal of choice is not the first to be found, you may
define it in your|vimrc|by setting the variable g:vimrplugin_term, as in the
example below:
>
   let g:vimrplugin_term = "xterm"
<
                                                    *g:vimrplugin_term_cmd*
If your terminal emulator is not listed above, or if you are not satisfied
with the way your terminal emulator is called by the plugin, you may define in
your|vimrc|the variable g:vimrplugin_term_cmd, as in the example below:
>
   let g:vimrplugin_term_cmd = "gnome-terminal -t R -e"
<
                                                *g:vimrplugin_underscore*
To disable the underscore replacement with " <- " put in your |vimrc|:
>
   let g:vimrplugin_underscore = 1
<
                                                         *r-pager*
You may also want to use less in a separate terminal emulator as the default
pager for R's help. You can use the script ~/.vim/tools/rpager.sh (which will
call less) by putting in your ~/.Rprofile:
>
   options(pager="~/.vim/tools/rpager.sh")
<
                                                   *g:vimrplugin_hstart*
The plugin can call R's function help.start() the first time that you press
<C-H>. If you want this behavior, you should put in your |vimrc|:
>
   let g:vimrplugin_hstart = 1
<
                                                *g:vimrplugin_browser_time*
After calling help.start(), the plugin will wait 4 seconds before sending to R
the help command. If your browser needs either more or less time to start, you
may want to add the following global variable (with the appropriate value) to
your|vimrc|:
>
   let g:vimrplugin_browser_time = 4
<
                                                  *g:vimrplugin_single_r*
If you prefer that all Vim buffers use the same R process, put the following
option in your|vimrc|:
>
   let g:vimrplugin_single_r = 1
<
                                                 *g:vimrplugin_noscreenrc*
Vim runs screen with a special configuration file. If you want to use
your own ~/.screenrc, put in your|vimrc|:
>
   let g:vimrplugin_noscreenrc = 1
<
                                                      *g:vimrplugin_map_r*

If the variable g:vimrplugin_map_r exists, the plugin will map the letter 'r'
to send lines to R when there are visually selected lines (for compatibility
with the original plugin). To activate this option, put in your |vimrc|:
>
   let g:vimrplugin_map_r = 1
<
You may want to put in your|vimrc|the following three lines which are in the
original plugin and are intended to increase compatibility with emacs edited
code:
>
   set expandtab
   set shiftwidth=4
   set tabstop=8
<

==============================================================================
8. Custom key bindings~
                                                 *r-plugin-custom-key-bindings*

To customize a key binding you should put in your|vimrc|something like:
>
   map <C-F2> <Plug>RStart
   imap <C-F2> <Plug>RStart
   vmap <C-F2> <Plug>RStart
<
In the above example, R would be started by pressing <C-F2> instead of the
default <F2>. It is necessary to create three maps for most functions because
the way the function is called is slightly different according to Vim's mode
(normal, insert or visual). Custom key bindings are not shown in Vim's menu,
but you can type|:map|to see the list of current mappings.  Below is the
complete list of customizable key bindings with their default values. You may
simply copy and paste the list or part of it to your|vimrc|and edit the key
bindings:
>
   map  <S-F1>    <Plug>RShowArgs
   imap <S-F1>    <Plug>RShowArgs
   vmap <S-F1>    <Plug>RShowArgs
   map  <C-H>     <Plug>RHelp
   imap <C-H>     <Plug>RHelp
   vmap <C-H>     <Plug>RHelp
   map  <F2>      <Plug>RStart
   imap <F2>      <Plug>RStart
   vmap <F2>      <Plug>RStart
   map  <F4>      <Plug>RvanillaStart
   imap <F4>      <Plug>RvanillaStart
   vmap <F4>      <Plug>RvanillaStart
   map  <F5>      <Plug>RSendFile
   imap <F5>      <Plug>RSendFile
   vmap <F5>      <Plug>RSendFile
   map  <F8>      <Plug>RBuildTags
   imap <F8>      <Plug>RBuildTags
   vmap <F8>      <Plug>RBuildTags
   map  <F9>      <Plug>RSendLine
   imap <F9>      <Plug>RSendLine
   vmap <F9>      <Plug>RSendLine
   map  <M-Enter> <Plug>RSendLAndOpenNewOne
   imap <M-Enter> <Plug>RSendLAndOpenNewOne
   vmap <M-Enter> <Plug>RSendLAndOpenNewOne
   vmap <F9>      <Plug>RSendBlock
   map  <C-F9>    <Plug>RSendFunction
   imap <C-F9>    <Plug>RSendFunction
   vmap <C-F9>    <Plug>RSendFunction
<

==============================================================================
9. Files~
                                                      *r-plugin-files*

The following files are part of the plugin and should be in your ~/.vim
directory after the installation:

   .
   |-- after
   |   |-- filetype.vim
   |   `-- syntax
   |       `-- r.vim
   |-- autoload
   |   `-- rcomplete.vim
   |-- bitmaps
   |   |-- rbuffer.xpm
   |   |-- rcomplete.xpm
   |   |-- rfunction.xpm
   |   |-- ricon.png
   |   |-- ricon.xbm
   |   |-- rline.xpm
   |   |-- rregion.xpm
   |   '-- rstart.xpm
   |-- doc
   |   `-- r-plugin.txt
   |-- ftplugin
   |   |-- r.vim
   |   |-- rhelp.vim -> r.vim
   |   `-- rnoweb.vim -> r.vim
   |-- indent
   |   `-- r.vim
   `-- tools
       |-- rargs.R
       |-- rpager.sh
       `-- rtags.R

==============================================================================
 vim:tw=78:ts=8:ft=help:norl:
