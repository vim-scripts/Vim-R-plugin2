*r-plugin.txt*                                              *vim-r-plugin*

                                vim-r-plugin2~
                            Plugin to work with R~

Author: Jakson A. Aquino (jalvesaq@gmail.com)
Last Change: 23 May 2009

For Vim version 7.2 and above

==============================================================================

1. Overview                                     |r-plugin-overview|
2. Main features                                |r-plugin-features|
3. Installation                                 |r-plugin-installation|
4. Use                                          |r-plugin-use|
5. How the plugin works                         |r-plugin-functioning|
6. Known bugs and workarounds                   |r-plugin-known-bugs|
7. Options                                      |r-plugin-options|
8. Custom key bindings                          |r-plugin-custom-key-bindings|
9. Files                                        |r-plugin-files|

==============================================================================
1. Overview~
                                                      *r-plugin-overview*

This plugin improves Vim's support to edit R code and is based on Johannes
Ranke's plugin. The new functions are similar to what you can find in ess mode
of emacs, and many of the ToolBar icons were borrowed from ess source code.
The last version of this plugin is available at:

    http://www.vim.org/scripts/script.php?script_id=2628

The plugin is under development. What now is default behavior might become
optional and key bindings might change in the future. Please, tell me your
preferences and suggestions and report any bugs.


==============================================================================
2. Main features~
                                                      *r-plugin-features*
  Linux/Unix only:~

    * Communication with R.
    * Omni completion for R objects.

  All platforms:~

    * Indent R code.
    * Small improvements in syntax highlight: added 'T' and 'F' as booleans
      and set strings and comments as spell regions.


==============================================================================
3. Installation~
                                                     *r-plugin-installation*

Install the following packages

   Debian/Ubuntu:
>
     xterm r-base-core libio-pty-perl libterm-readline-gnu-perl
<
   Fedora:
>
     xterm R perl-IO-Tty perl-Term-ReadLine-Gnu
<
You need to activate plugins and indentation according to 'filetype' in your
|vimrc|:
>
   filetype plugin indent on
<
Create your ~/.vim directory if you do not have it yet:
>
   mkdir -p ~/.vim
<
Make a backup of your ~/.vim directory because existing files will be
replaced. Please, look at|r-plugin-files|to see the list of files.

Uncompress the archive:
>
   tar -xvzf vim-r-plugin2-*.tar.gz -C ~/.vim
<
Start Vim and build the tags file for this document (and others that eventually
are in at the same directory):
>
   :helptags ~/.vim/doc
<
Optional steps~

Edit Vim's ToolBar and remove the buttons that you never use.  The plugin adds
some buttons to the tool bar, but you may not see them because gvim has too
many buttons by default. For example:
>
   aunmenu ToolBar.Open
<
You can edit the file ftplugin/r.vim and replace xterm by other terminal
emulator. The file ftplugin/r.vim has an example of how to use gnome-terminal.

Desktop integration~

If you prefer to use the file manager instead of a terminal emulator to
navigate in the directory tree and to open files, you might be interested in
configuring your file manager to use the script ~/.vim/open-gvim-here to open
R source code. For example, if you use Gnome, open nautilus, right click a
file whose extension is .R, choose the menu item "Properties" and configure
the "Open with" command.

The script open-gvim-here simply changes to the file's directory before
opening it.


==============================================================================
4. Use~
                                                      *r-plugin-use*

Don't hit CTRL-C~

Don't hit CTRL-C in the terminal window. Instead, you should either press the
<F6> key or click in the "Stop R" menu item or ToolBar button (see
|r-plugin-limitations|below).

Key bindings~

The plugin has the following key biddings, with the corresponding menu items
and, in some cases, tool bar buttons:

   <C-H>     Run R help() with word under cursor as parameter.
   <S-F1>    Run R args() with word under cursor as parameter.
   <F2>      Start a listening R interpreter in new xterm.
   <F3>      Start a listening R-devel interpreter in new xterm.
   <F4>      Start a listening R --vanilla interpreter in new xterm.
   <F5>      Send the current file to R.
   <F6>      Stop R.
   <F7>      Kill R.
   <F8>      Build tags file (/tmp/.Rtags-user-time) for omni completion.
   <F9>      Send the current line or selected code and go to the next line.
   <C-F9>    Send the current function.
   <S-Enter> Send the current line to R and open a new line (insert mode only).
   <_>       In insert mode, write " <- ", if not inside a string. Please,
	     type "_" again if the function yields " <- " when you really
	     needs "_".

You can customize all key bindings, except <_>
(see|r-plugin-custom-key-bindings|).

==============================================================================
5. How the plugin works~
                                                      *r-plugin-functioning*

Communication through a pipe~

The script funnel.pl written by Larry Clapp permits Vim to send code to a R
interpreter which is running in a terminal emulator. The code is sent through
a pipe and you can also type commands in terminal emulator. There are some
limitations inherent to this approach. One of them is that the R's builtin
autocomplete function will not work. Other limitation is that you should never
hit CTRL-C in the terminal window.

Each Vim buffer runs its own instance of R in a separated terminal emulator
because the pipe has a unique name for each buffer. The pipe name is made
using the user name and the seconds of localtime(). Hence, a name clash is
possible if a single user starts more than one Vim buffer at the same second.
This will happen if you open many files at the same time in different tabs.
For example:
>
   gvim -p file1.R file2.R file3.R
<
Omni completion~

You should type <C-X><C-O> to start the |omni-completion|. Since it's
uncomfortable to type such a combination of keys, you might want to map an
easier combination for omni completion in your |vimrc|. For example:
>
   imap <C-Space> <C-X><C-O>
<
The omni completion shows the name of the object, its class and its
environment (most frequently, its package name). Vim sends to R the command
to source the script ~/.vim/tools/rtags.R, which produces the tags file used
for omni completion.  You can rebuild the tags file at any time, but Vim
will automatically build it the first time you use the omni completion
feature.  After you send to R a line of code containing the string "library",
Vim will turn on the flag indicating the need of rebuilding the tags file.
Then, if you try an omni completion, the tags file will be rebuilt
automatically. You still need to build the tags file manually to add the names
of other objects created after the tags file. The string "library" is not
detected if you send the whole file to R.

While building the tags file, if a data.frame is found, its columns are also
added to the list of objects. When you try to complete the name of a
data.frame, the columns are not shown, but when the data.frame name is already
complete, and you have inserted the '$' symbol, the next completion will
include the column names.


==============================================================================
6. Known bugs and workarounds~
                                                      *r-plugin-known-bugs*

You should never hit CTRL-C~

You should never hit CTRL-C in the terminal emulator window. If you hit CTRL-C
in the terminal window, the terminal will close, but R will not be killed, and
it will not stop its work. You can stop R from Vim by hitting the key <F6> or
by clicking in the corresponding menu item (R / Stop R process) or tool bar
button. You may be used to use CTRL-C to make R stop immediately a length
process, but currently you can't do this if R is running through a pipe.

You cannot send large blocks of code to R~

The plugin does not send more than 4000 bytes at once to R because it could
freeze the terminal emulator window. If you have large blocks of code to send
to R, you will not be able to send the whole code at once.

The terminal emulator truncates big lines sent by Vim~

The truncated lines are not a xterm limitation, but an issue with running R
through a pipe (and I don't know how to solve it). However, I don't see this
annoying problem as a serious bug because you still have the entire lines in
the script that you are editing with Vim. You can break the lines in Vim
before sending them to R, and, in my opinion, the code will become more
readable.

R's autocomplete function does not work in the terminal and~
you cannot scroll R help files in the terminal emulator~

It seems that R doesn't use GNU Readline when called through a pipe. That's
why you can't complete object names with <Tab> in the terminal window (and
that's why I created the omni function for Vim). Regarding the scroll issue in
R help, the best solution for me is to do "help.start()" in the terminal
window before using help(). This will be done automatically by the plugin (see
|g:vimrplugin_nohstart|for details).


==============================================================================
7. Options~
                                                      *r-plugin-options*

                                                    *g:vimrplugin_term_cmd*
The plugin uses uxterm to run R, but you may define another terminal emulator
in your|vimrc|by setting the variable g:vimrplugin_term_cmd, as in the example
below:
>
   let g:vimrplugin_term_cmd = "gnome-terminal -t R -x"
<
                                                   *g:vimrplugin_nohstart*
The plugin will call R's function help.start() the first time that you press
<C-H>. To inhibit this behavior, you should put in your |vimrc|:
>
   let g:vimrplugin_nohstart = 1
<
                                                *g:vimrplugin_browser_time*
After calling help.start(), the plugin will wait 4 seconds before sending to R
the help command. If your browser needs either more or less time to start, you
may want to add the following global variable (with the appropriate value) to
your|vimrc|:
>
   let g:vimrplugin_browser_time = 4
<
                                                      *g:vimrplugin_map_r*

If the variable g:vimrplugin_map_r exists, the plugin will map the letter 'r'
to send lines to R when there are visually selected lines (for compatibility
with the original plugin). To activate this option, put in your |vimrc|:
>
   let g:vimrplugin_map_r = 1
<

==============================================================================
8. Custom key bindings~
                                                 *r-plugin-custom-key-bindings*

To customize a key binding you should put in your|vimrc|something like:
>
   map <C-F2> <Plug>RStart
   imap <C-F2> <Plug>RStart
   vmap <C-F2> <Plug>RStart
<
In the above example, R would be started by pressing <C-F2> instead of the
default <F2>. It is necessary to create three maps for most functions because
the way the function is called is slightly different according to Vim's mode
(normal, insert or visual). Custom key bindings are not shown in Vim's menu,
but you can type|:map|to see the list of current mappings.  Below is the
complete list of customizable key bindings with their default values. You may
simply copy and paste the list or part of it to your|vimrc|and edit the key
bindings:
>
   map  <S-F1>    <Plug>RShowArgs
   imap <S-F1>    <Plug>RShowArgs
   vmap <S-F1>    <Plug>RShowArgs
   map  <C-H>     <Plug>RHelp
   imap <C-H>     <Plug>RHelp
   vmap <C-H>     <Plug>RHelp
   map  <F2>      <Plug>RStart
   imap <F2>      <Plug>RStart
   vmap <F2>      <Plug>RStart
   map  <F3>      <Plug>RStart-dev
   imap <F3>      <Plug>RStart-dev
   vmap <F3>      <Plug>RStart-dev
   map  <F4>      <Plug>RStart-vanilla
   imap <F4>      <Plug>RStart-vanilla
   vmap <F4>      <Plug>RStart-vanilla
   map  <F5>      <Plug>RSendFile
   imap <F5>      <Plug>RSendFile
   vmap <F5>      <Plug>RSendFile
   map  <F6>      <Plug>RStop
   imap <F6>      <Plug>RStop
   vmap <F6>      <Plug>RStop
   map  <F7>      <Plug>RKill
   imap <F7>      <Plug>RKill
   vmap <F7>      <Plug>RKill
   map  <F8>      <Plug>RBuildTags
   imap <F8>      <Plug>RBuildTags
   vmap <F8>      <Plug>RBuildTags
   map  <F9>      <Plug>RSendLine
   imap <F9>      <Plug>RSendLine
   vmap <F9>      <Plug>RSendLine
   map  <S-Enter> <Plug>RSendLineAndOpenNewOne
   imap <S-Enter> <Plug>RSendLineAndOpenNewOne
   vmap <S-Enter> <Plug>RSendLineAndOpenNewOne
   vmap <F9>      <Plug>RSendBlock
   map  <C-F9>    <Plug>RSendFunction
   imap <C-F9>    <Plug>RSendFunction
   vmap <C-F9>    <Plug>RSendFunction
<

==============================================================================
9. Files~
                                                      *r-plugin-files*

The following files are part of the plugin and should be in your ~/.vim
directory after the installation:

   .
   |-- after
   |   |-- filetype.vim
   |   `-- syntax
   |       `-- r.vim
   |-- autoload
   |   `-- rcomplete.vim
   |-- bitmaps
   |   |-- rbuffer.xpm
   |   |-- rcomplete.xpm
   |   |-- rfunction.xpm
   |   |-- rkill.xpm
   |   |-- rline.xpm
   |   |-- rregion.xpm
   |   |-- rstart.xpm
   |   `-- rstop.xpm
   |-- doc
   |   `-- r-plugin.txt
   |-- ftplugin
   |   |-- r.vim
   |   |-- rhelp.vim -> r.vim
   |   `-- rnoweb.vim -> r.vim
   |-- indent
   |   `-- r.vim
   `-- tools
       |-- open-gvim-here
       |-- rargs.R
       |-- rfunnel.pl
       `-- rtags.R

==============================================================================
 vim:tw=78:ts=8:ft=help:norl:
