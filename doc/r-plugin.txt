*r-plugin.txt*                                              *vim-r-plugin*

                                vim-r-plugin2~
                            Plugin to work with R~

Author: Jakson A. Aquino (jalvesaq@gmail.com)
Last Change: 16 May 2009

For Vim version 7.2 and above

==============================================================================

1. Overview                                     |r-plugin-overview|
2. Main features                                |r-plugin-features|
3. Installation                                 |r-plugin-installation|
4. Use                                          |r-plugin-use|
5. How the plugin works                         |r-plugin-functioning|
6. Known bugs                                   |r-plugin-known-bugs|
7. Options                                      |r-plugin-options|
8. Files                                        |r-plugin-files|

==============================================================================
1. Overview~
                                                      *r-plugin-overview*

This plugin improves Vim's support to edit R code and is based on Johannes
Ranke's plugin. The new functions are similar to what you can find in ess mode
of emacs, and many of the ToolBar icons were borrowed from ess source code.
The last version of this plugin is available at:

    http://www.vim.org/scripts/script.php?script_id=2628

The plugin is under development. What now is default behavior may become
optional and key bindings might change in the future. Please, tell me your
preferences and suggestions and report any bugs.


==============================================================================
2. Main features~

  Linux/Unix only:~

    * Communication with R.
    * Omni completion for R objects.

  All platforms:~

    * Indent R code.
    * Small improvements in syntax highlight: added 'T' and 'F' as booleans
      and set strings and comments as spell regions.


==============================================================================
3. Installation~
                                                      *r-plugin-instalation*

Install the following packages

   Debian/Ubuntu:
>
     xterm r-base-core libio-pty-perl libterm-readline-gnu-perl
<
   Fedora:
>
     xterm R perl-IO-Tty perl-Term-ReadLine-Gnu
<
You need to activate plugins and indentation according to 'filetype' in your
|vimrc|:
>
   filetype plugin indent on
<
Create your ~/.vim directory if you do not have it yet:
>
   mkdir -p ~/.vim
<
Make a backup of your ~/.vim directory because existing files will be
replaced. Please, look at|r-plugin-files|to see the list of files.

Uncompress the archive:
>
   tar -xvzf vim-r-plugin2-*.tar.gz -C ~/.vim
<
Start Vim and build the tags file for this document (and others that eventually
are in at the same directory):
>
   :helptags ~/.vim/doc
<
Optional steps~

Edit Vim's ToolBar and remove the buttons that you never use.  The plugin adds
some buttons to the tool bar, but you may not see them because gvim has too
many buttons by default. For example:
>
   aunmenu ToolBar.Open
<
You can edit the file ftplugin/r.vim and replace xterm by other terminal
emulator. The file ftplugin/r.vim has an example of how to use gnome-terminal.

Desktop integration~

If you prefer to use the file manager instead of a terminal emulator to
navigate in the directory tree and to open files, you should do the following:

   1. Uncompress the archive:
>
      sudo tar -xvf ~/.vim/tools/r-plugin-desktop.tar -C /
<
   2. Open you file manager and configure it to use the script
      /usr/local/bin/vim-r-plugin to open R source code and to associate
      *.R with the icon /usr/local/share/pixmaps/vim-r-plugin.xpm.

      If you use Gnome, in order to do the above steps, open nautilus, right
      click a file whose extension is .R and choose the menu item
      "Properties".

The archive ~/.vim/tools/r-plugin-desktop.tar contains the following files:
>
   usr/local/bin/vim-r-plugin
   usr/local/share/pixmaps/vim-r-plugin.xpm
<
The script /usr/local/bin/vim-r-plugin simply changes to the file's directory
before opening it.


==============================================================================
4. Use~
                                                      *r-plugin-use*

Don't hit CTRL-C~

Don't hit CTRL-C in the terminal window. Instead, you should either press the
<F6> key or click in the "Stop R" menu item or ToolBar button (see
|r-plugin-limitations|below).

Key bindings~

The plugin has the following key biddings, with the corresponding menu items
and, in some cases, tool bar buttons: 

   <C-H>     Run R args() with word under cursor as parameter.
   <F1>      Run R args() with word under cursor as parameter.
   <F2>      Start a listening R interpreter in new xterm.
   <F3>      Start a listening R-devel interpreter in new xterm.
   <F4>      Start a listening R --vanilla interpreter in new xterm.
   <F5>      Send current file to R.
   <F6>      Stop R.
   <F7>      Kill R.
   <F8>      Build tags file (/tmp/.Rtags-user-time) for omni completion.
   <F9>      Send current line or selected block and go to next line of code.
   <C-F9>    Send current function.
   <S-Enter> Send current line to R and open a new line (insert mode only).
   _         Write " <- ", if not inside a string. Please, type "_" again if
             the function yields " <- " when you really needs "_".


==============================================================================
5. How the plugin works~
                                                      *r-plugin-functioning*

Communication through a pipe~

The script funnel.pl written by Larry Clapp permits Vim to send code to a R
interpreter which is running in a terminal emulator. The code is sent through
a pipe and you can also type commands in terminal emulator. There are some
limitations inherent to this approach. One of them is that the R's builtin
autocomplete function will not work. Other limitation is that you should never
hit CTRL-C in the terminal window.

Each Vim buffer runs its own instance of R in a separated terminal emulator
because the pipe has an unique name for each buffer. The pipe name is made
using the user name and the seconds of localtime(). Hence, a name clash is
possible if a single user starts more than one Vim buffer at the same second.
This will happen if you open many files at the same time in different tabs.
For example:
>
   gvim -p file1.R file2.R file3.R
<
Omni completion~

You should type <C-X><C-O> to start the |omni-completion|. Since it's
uncomfortable to type such a combination of keys, you may want to map an
easier combination for omni completion. I, for example, have the following in
my |vimrc|:
>
   imap <C-Space> <C-X><C-O>
<
The omni completion shows the name of the object, its class and its
environment (mostly frequently, its package name). Vim sends to R the command
to source the script ~/.vim/tools/rtags.R, which produces the tags file used
for omni completion.  You might rebuild the tags file at any time, but Vim
will automatically build it the first time you use the omni completion
feature.  After you send to R a line of code containing the string "library",
Vim will turn on the flag indicating the need of rebuilding the tags file.
Then, if you try an omni completion, the tags file will be rebuilt
automatically. You still need to build the tags file manually to add the names
of other objects created after the tags file. The string "library" is not
detected if you send the whole file to R and if you send blocks of code using
either the ToolBar button or the menu.

While building the tags file, if a data.frame is found, its columns are also
added to the list of objects. When you try to complete the name of a
data.frame, the columns are not shown, but when the data.frame name is already
complete, and you include the '$' symbol, the next completion will include the
columns.


==============================================================================
6. Known bugs~
                                                      *r-plugin-known-bugs*

You should never hit CTRL-C in the terminal emulator window. If you hit CTRL-C
in the terminal window, the terminal will close, but R will not be killed, and
it will not stop its work. You can stop R from Vim by hitting the key <F6> or
by clicking in the corresponding menu item (R / Stop R process) or tool bar
button. You might be used to use CTRL-C to make R stop immediately a length
process, but currently you can't do this if R is running through a pipe.

Sending large blocks of code to R freezes the terminal emulator window.  You
have to kill R and close the terminal.


==============================================================================
7. Options~
                                                      *r-plugin-options*
                                                      *g:vimrplugin_map_r*

Currently there is only one option, g:vimrplugin_map_r, to map the letter 'r'
to send line(s) to R when Vim is in normal mode (for compatibility with the
original plugin). To activate this option, put in your |vimrc|:
>
   let g:vimrplugin_map_r = 1
<

==============================================================================
8. Files~
                                                      *r-plugin-files*

The following files are part of the plugin and should be in your ~/.vim
directory after the installation:

   .
   |-- after
   | |-- filetype.vim
   | `-- syntax
   | `-- r.vim
   |-- autoload
   | `-- rcomplete.vim
   |-- bitmaps
   | |-- rbuffer.xpm
   | |-- rcomplete.xpm
   | |-- rfunction.xpm
   | |-- rkill.xpm
   | |-- rline.xpm
   | |-- rregion.xpm
   | `-- rstart.xpm
   |-- doc
   | `-- r-plugin.txt
   |-- ftplugin
   | |-- r.vim
   | |-- rhelp.vim -> r.vim
   | `-- rnoweb.vim -> r.vim
   |-- indent
   | `-- r.vim
   `-- tools
    |-- rfunnel.pl
    `-- rtags.R

==============================================================================
 vim:tw=78:ts=8:ft=help:norl:
